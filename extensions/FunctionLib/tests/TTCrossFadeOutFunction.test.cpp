/*
 * Unit tests for the Jamoma DSP CrossFadeOutFunction of the FunctionLib 
 * Copyright Â© 2012, Trond Lossius
 * 
 * License: This code is licensed under the terms of the "New BSD License"
 * http://creativecommons.org/licenses/BSD/
 */

#include "TTFunction.h"
#include "TTCrossFadeOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = 1.0 - sin((1.0-x) * pi * 0.5);
 printf("%.16e,\n", y)
 
 */

TTErr TTCrossFadeOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		7.6488611983061006e-05,
		3.0594274691686518e-04,
		6.8832730354473348e-04,
		1.2235837857387244e-03,
		1.9116303114480315e-03,
		2.7523616252252969e-03,
		3.7456491143279536e-03,
		4.8913408283933757e-03,
		6.1892615026836184e-03,
		7.6392125848969705e-03,
		9.2409722655419912e-03,
		1.0994295511869256e-02,
		1.2898914105355930e-02,
		1.4954536682736719e-02,
		1.7160848780576221e-02,
		1.9517512883374666e-02,
		2.2024168475199724e-02,
		2.4680432094837390e-02,
		2.7485897394453063e-02,
		3.0440135201753371e-02,
		3.3542693585639660e-02,
		3.6793097925342910e-02,
		4.0190850983030768e-02,
		4.3735432979872479e-02,
		4.7426301675554283e-02,
		5.1262892451228836e-02,
		5.5244618395890122e-02,
		5.9370870396156183e-02,
		6.3641017229450814e-02,
		6.8054405660565420e-02,
		7.2610360541589758e-02,
		7.7308184915193312e-02,
		8.2147160121244900e-02,
		8.7126545906750730e-02,
		9.2245580539096150e-02,
		9.7503480922573771e-02,
		1.0289944271817897e-01,
		1.0843264046665568e-01,
		1.1410222771477263e-01,
		1.1990733714481172e-01,
		1.2584708070724726e-01,
		1.3192054975659828e-01,
		1.3812681519042980e-01,
		1.4446492759148410e-01,
		1.5093391737292128e-01,
		1.5753279492664263e-01,
		1.6426055077467860e-01,
		1.7111615572361616e-01,
		1.7809856102204158e-01,
		1.8520669852097560e-01,
		1.9243948083727624e-01,
		1.9979580151998289e-01,
		2.0727453521957928e-01,
		2.1487453786014521e-01,
		2.2259464681437424e-01,
		2.3043368108143025e-01,
		2.3839044146761212e-01,
		2.4646371076980456e-01,
		2.5465225396168123e-01,
		2.6295481838263624e-01,
		2.7137013392941278e-01,
		2.7989691325039967e-01,
		2.8853385194256687e-01,
		2.9727962875100988e-01,
		3.0613290577107100e-01,
		3.1509232865300896e-01,
		3.2415652680918250e-01,
		3.3332411362372061e-01,
		3.4259368666464185e-01,
		3.5196382789839487e-01,
		3.6143310390678562e-01,
		3.7100006610625758e-01,
		3.8066325096949127e-01,
		3.9042118024929218e-01,
		4.0027236120472687e-01,
		4.1021528682948061e-01,
		4.2024843608239271e-01,
		4.3037027412014284e-01,
		4.4057925253204688e-01,
		4.5087380957692758e-01,
		4.6125237042202638e-01,
		4.7171334738391635e-01,
		4.8225514017138194e-01,
		4.9287613613022685e-01,
		5.0357471048997371e-01,
		5.1434922661241633e-01,
		5.2519803624198880e-01,
		5.3611947975791074e-01,
		5.4711188642807129e-01,
		5.5817357466461326e-01,
		5.6930285228117805e-01,
		5.8049801675177104e-01,
		5.9175735547120967e-01,
		6.0307914601711277e-01,
		6.1446165641339268e-01,
		6.2590314539520686e-01,
		6.3740186267533294e-01,
		6.4895604921192229e-01,
		6.6056393747759345e-01,
		6.7222375172982318e-01,
		6.8393370828259559e-01,
		6.9569201577926387e-01,
		7.0749687546658913e-01,
		7.1934648146990687e-01,
		7.3123902106938576e-01,
		7.4317267497733197e-01,
		7.5514561761649868e-01,
		7.6715601739935857e-01,
		7.7920203700829382e-01,
		7.9128183367666494e-01,
		8.0339355947071145e-01,
		8.1553536157224404e-01,
		8.2770538256208326e-01,
		8.3990176070420253e-01,
		8.5212263023053092e-01,
		8.6436612162637427e-01,
		8.7663036191640709e-01,
		8.8891347495119544e-01,
		9.0121358169420585e-01,
		9.1352880050925422e-01,
		9.2585724744835374e-01,
		9.3819703653991582e-01,
		9.5054628007726094e-01,
		9.6290308890739473e-01,
		9.7526557272000514e-01,
		9.8763184033663709e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("crossFadeOut"));

	
	// create 1 channel audio signal objects
	TTObjectInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectRelease(&input);
	TTObjectRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}