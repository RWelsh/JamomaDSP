/*
 * Unit tests for the Jamoma DSP ExpFunction of the FunctionLib 
 * Copyright Â© 2012, Trond Lossius
 * 
 * License: This code is licensed under the terms of the "New BSD License"
 * http://creativecommons.org/licenses/BSD/
 */

#include "TTFunction.h"
#include "TTExpFunction.h"


/*
 * coefficients calculated in Octave using:
 
 // Test is performed with base = e:
 // This implies that k = log(base) = log(e) = 1 
 // and we get the following equations:
 
 x = linspace(0,1,128);
 y = (exp(x) - 1.) / (e - 1.);
 printf("%.16e,\n", y)
 
 % TODO: Add additional tests for other bases (in particular 2 and 10)
 
 */

TTErr TTExpFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = {
		0.0000000000000000e+00,
		4.6005825147629152e-03,
		9.2375330821049106e-03,
		1.3911139195021205e-02,
		1.8621690619167727e-02,
		2.3369479410825809e-02,
		2.8154799935009960e-02,
		3.2977948883719160e-02,
		3.7839225294331119e-02,
		4.2738930568143582e-02,
		4.7677368489060491e-02,
		5.2654845242427264e-02,
		5.7671669434014423e-02,
		6.2728152109150795e-02,
		6.7824606772009077e-02,
		7.2961349405042994e-02,
		7.8138698488578115e-02,
		8.3356975020558055e-02,
		8.8616502536446803e-02,
		9.3917607129286942e-02,
		9.9260617469918877e-02,
		1.0464586482735769e-01,
		1.1007368308933271e-01,
		1.1554440878298762e-01,
		1.2105838109574638e-01,
		1.2661594189634237e-01,
		1.3221743575601486e-01,
		1.3786320996987186e-01,
		1.4355361457842331e-01,
		1.4928900238928342e-01,
		1.5506972899904498e-01,
		1.6089615281532627e-01,
		1.6676863507899289e-01,
		1.7268753988655430e-01,
		1.7865323421273882e-01,
		1.8466608793324524e-01,
		1.9072647384767608e-01,
		1.9683476770265088e-01,
		2.0299134821510270e-01,
		2.0919659709575908e-01,
		2.1545089907280757e-01,
		2.2175464191574987e-01,
		2.2810821645944329e-01,
		2.3451201662833268e-01,
		2.4096643946087376e-01,
		2.4747188513415022e-01,
		2.5402875698868432e-01,
		2.6063746155344464e-01,
		2.6729840857105047e-01,
		2.7401201102317674e-01,
		2.8077868515615856e-01,
		2.8759885050679890e-01,
		2.9447292992837976e-01,
		3.0140134961687987e-01,
		3.0838453913739833e-01,
		3.1542293145078831e-01,
		3.2251696294050070e-01,
		3.2966707343964002e-01,
		3.3687370625823421e-01,
		3.4413730821072019e-01,
		3.5145832964364643e-01,
		3.5883722446359484e-01,
		3.6627445016532295e-01,
		3.7377046786012885e-01,
		3.8132574230444044e-01,
		3.8894074192863026e-01,
		3.9661593886605873e-01,
		4.0435180898234613e-01,
		4.1214883190487728e-01,
		4.2000749105253787e-01,
		4.2792827366568653e-01,
		4.3591167083636512e-01,
		4.4395817753874534e-01,
		4.5206829265981824e-01,
		4.6024251903032487e-01,
		4.6848136345593228e-01,
		4.7678533674865586e-01,
		4.8515495375852924e-01,
		4.9359073340552601e-01,
		5.0209319871173264e-01,
		5.1066287683377598e-01,
		5.1930029909550768e-01,
		5.2800600102094553e-01,
		5.3678052236747731e-01,
		5.4562440715932548e-01,
		5.5453820372127671e-01,
		5.6352246471267853e-01,
		5.7257774716170418e-01,
		5.8170461249988947e-01,
		5.9090362659694051e-01,
		6.0017535979581904e-01,
		6.0952038694810284e-01,
		6.1893928744962790e-01,
		6.2843264527641018e-01,
		6.3800104902085353e-01,
		6.4764509192824138e-01,
		6.5736537193351940e-01,
		6.6716249169836694e-01,
		6.7703705864856267e-01,
		6.8698968501164492e-01,
		6.9702098785487066e-01,
		7.0713158912347340e-01,
		7.1732211567922455e-01,
		7.2759319933929811e-01,
		7.3794547691544510e-01,
		7.4837959025347489e-01,
		7.5889618627305100e-01,
		7.6949591700779929e-01,
		7.8017943964573544e-01,
		7.9094741657000989e-01,
		8.0180051539997621e-01,
		8.1273940903258513e-01,
		8.2376477568410156e-01,
		8.3487729893215701e-01,
		8.4607766775813087e-01,
		8.5736657658986704e-01,
		8.6874472534472902e-01,
		8.8021281947299557e-01,
		8.9177157000159757e-01,
		9.0342169357820468e-01,
		9.1516391251565465e-01,
		9.2699895483673922e-01,
		9.3892755431934116e-01,
		9.5095045054192850e-01,
		9.6306838892940949e-01,
		9.7528212079934806e-01,
		9.8759240340854781e-01,
		1.0000000000000000e+00,
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("exponential"));

	
	// create 1 channel audio signal objects
	TTObjectInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectRelease(&input);
	TTObjectRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}