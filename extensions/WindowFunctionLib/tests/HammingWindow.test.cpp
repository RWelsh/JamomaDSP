/* 
 * Unit tests for the Jamoma DSP Kaiser Window Function
 * Copyright Â© 2011, Tim Place
 * 
 * License: This code is licensed under the terms of the "New BSD License"
 * http://creativecommons.org/licenses/BSD/
 */

#include "WindowFunction.h"
#include "HammingWindow.h"


// coefficients calculated in Octave using these commands:
//	n = 0.0:1/127:1.0;
//	y = 0.54 + 0.46 * cos(2*pi*(n-0.5));
static TTFloat64 sHammingWindowCoefficients128[128] = {
	0.0800000000000000,	0.0805628485414398,	0.0822500167810610,	0.0850573759354599,	0.0889780559263524,	0.0940024621928066,	0.100118299170741,	0.107310600382232,	
	0.115561765060989,	0.124851601224384,	0.135157375086613,	0.146453866692083,	0.158713431632864,	0.171906068699192,	0.185999493297458,	0.200959216456013,	
	0.216748629225465,	0.233329092266912,	0.250660030408878,	0.268699031941561,	0.287401952405387,	0.306723022619904,	0.326614960688639,	0.347029087705815,	
	0.367915446881795,	0.389222925795719,	0.410899381476157,	0.432891768003705,	0.455146266323232,	0.477608415948132,	0.500223248234257,	0.522935420897402,	
	0.545689353445147,	0.568429363191639,	0.591099801522450,	0.613645190076067,	0.636010356508734,	0.658140569510427,	0.679981672741539,	0.701480217362516,	
	0.722583592832128,	0.743240155654278,	0.763399355758289,	0.783011860203399,	0.802029673904734,	0.820406257085326,	0.838096639166739,	0.855057528819616,	
	0.871247419904816,	0.886626693045890,	0.901157712584333,	0.914804918680351,	0.927534914333745,	0.939316547111965,	0.950120985385339,	0.959921788882895,	
	0.968694973396140,	0.976419069472435,	0.983075174954342,	0.988647001236375,	0.993120913125941,	0.996485962210947,	0.998733913652397,	0.999859266336418,	
	0.999859266336418,	0.998733913652397,	0.996485962210947,	0.993120913125941,	0.988647001236375,	0.983075174954342,	0.976419069472435,	0.968694973396140,	
	0.959921788882895,	0.950120985385339,	0.939316547111965,	0.927534914333744,	0.914804918680351,	0.901157712584333,	0.886626693045890,	0.871247419904816,	
	0.855057528819616,	0.838096639166739,	0.820406257085326,	0.802029673904735,	0.783011860203399,	0.763399355758289,	0.743240155654278,	0.722583592832128,	
	0.701480217362516,	0.679981672741539,	0.658140569510427,	0.636010356508734,	0.613645190076067,	0.591099801522450,	0.568429363191639,	0.545689353445147,	
	0.522935420897402,	0.500223248234257,	0.477608415948132,	0.455146266323232,	0.432891768003705,	0.410899381476157,	0.389222925795719,	0.367915446881795,	
	0.347029087705815,	0.326614960688639,	0.306723022619904,	0.287401952405387,	0.268699031941561,	0.250660030408878,	0.233329092266912,	0.216748629225465,	
	0.200959216456013,	0.185999493297458,	0.171906068699192,	0.158713431632864,	0.146453866692083,	0.135157375086613,	0.124851601224384,	0.115561765060989,	
	0.107310600382232,	0.100118299170741,	0.0940024621928066,	0.0889780559263524,	0.0850573759354599,	0.0822500167810610,	0.0805628485414398,	0.0800000000000000
};


TTErr HammingWindow::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioObjectPtr	windowObject = NULL;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	
	TTObjectInstantiate(TT("WindowFunction"), &windowObject, kTTVal1);
	windowObject->setAttributeValue(TT("function"), TT("hamming"));
	windowObject->setAttributeValue(TT("mode"), TT("apply"));
	
	// create 1 channel audio signal objects
	TTObjectInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed, and then process it
	input->fill(1.0);
	windowObject->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++) {
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], sHammingWindowCoefficients128[n]);
		badSampleCount += result;
		if (result)
			TTTestLog("BAD SAMPLE @ n=%i  ( value=%.10f   expected=%.10f )", n, output->mSampleVectors[0][n], sHammingWindowCoefficients128[n]);
	}

	TTTestAssertion("Produces correct window coefficients", 
					badSampleCount == 0, 
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	
	
	TTObjectRelease(&input);
	TTObjectRelease(&output);
	TTObjectRelease(&windowObject);
	
	// Wrap up the test results to pass back to whoever called this test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
}

